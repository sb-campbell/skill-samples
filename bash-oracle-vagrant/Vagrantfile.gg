# -*- mode: ruby -*-
# vi: set ft=ruby :

# Variables
params = YAML.load_file 'config/vagrant.yml'
var_box            = params['box']
var_vb_vm_base     = params['vb_vm_base']
var_vm1_name       = params['vm1_name']
var_vm2_name       = params['vm2_name']
var_mem_size       = params['mem_size']
var_cpus           = params['cpus']
var_vm1_public_ip  = params['vm1_public_ip']
var_vm2_public_ip  = params['vm2_public_ip']
var_disk1_name     = params['disk1_name']
var_disk2_name     = params['disk2_name']
var_disk_size      = params['disk_size']
var_non_rotational = params['non_rotational']
var_vm1_disk1 = var_vb_vm_base + "/" + var_vm1_name + "/" + var_disk1_name
var_vm2_disk1 = var_vb_vm_base + "/" + var_vm2_name + "/" + var_disk1_name
var_vm1_disk2 = var_vb_vm_base + "/" + var_vm1_name + "/" + var_disk2_name
var_vm2_disk2 = var_vb_vm_base + "/" + var_vm2_name + "/" + var_disk2_name

Vagrant.configure("2") do |config|

  config.vm.box = var_box

  # VM1 config
  config.vm.define "db1" do |db1|
    # set hostname inside VM
    db1.vm.hostname = var_vm1_name
    # set the hostname of the VM as used by vagrant (for referring to std-out/logs), note no ‘=‘
    db1.vm.define var_vm1_name

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    db1.vm.network "forwarded_port", guest:   80, host: 10080
    db1.vm.network "forwarded_port", guest:  443, host: 10443
    db1.vm.network "forwarded_port", guest: 1521, host: 11521
    db1.vm.network "forwarded_port", guest: 5500, host: 15500

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    db1.vm.network "private_network", ip: var_vm1_public_ip

    # Share an additional folder to the guest VM
    db1.vm.synced_folder "/Volumes/Samsung_T5/dev", "/oradev"
    #db1.vm.synced_folder "/Volumes/Samsung_T5/dev", "/oradev", group: "dba", owner: "oracle"

    # Provider-specific configuration so you can fine-tune. These expose provider-specific options.
    db1.vm.provider "virtualbox" do |vb1|
      vb1.memory = var_mem_size
      vb1.cpus   = var_cpus
      # set the name of the VirtualBox VM
      vb1.name   = var_vm1_name
    
      vb1.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', '0', '--nonrotational', var_non_rotational]

      unless File.exist?(var_vm1_disk1)
        vb1.customize ['createhd', '--filename', var_vm1_disk1, '--size', var_disk_size * 1024]
      end
      vb1.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_vm1_disk1]

      unless File.exist?(var_vm1_disk2)
        vb1.customize ['createhd', '--filename', var_vm1_disk2, '--size', var_disk_size * 1024]
      end
      vb1.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_vm1_disk2]
    end


    # Enable provisioning with shell scripts. Add'l options ( such as Puppet, Chef, Ansible, Salt, Docker, etc.)
    #config.vm.provision "shell", inline: <<-SHELL
    db1.vm.provision "shell", env: {"PUBLIC_IP" => var_vm1_public_ip, "VMNAME" => var_vm1_name, "PARTNER_IP" => var_vm2_public_ip, "PARTNER_VMNAME" => var_vm2_name}, inline: <<-SHELL
      echo "${PUBLIC_IP}    ${VMNAME}    ${VMNAME}.local" >> /etc/hosts
      echo "${PARTNER_IP}    ${PARTNER_VMNAME}    ${PARTNER_VMNAME}.local" >> /etc/hosts
      echo "${VMNAME}.local" > /etc/hostname
      sh /vagrant/scripts/setup.sh    
      echo "%dba  ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    SHELL

  end

  # VM2 config
  config.vm.define "db2" do |db2|
    # set hostname inside VM
    db2.vm.hostname = var_vm2_name
    # set the hostname of the VM as used by vagrant (for referring to std-out/logs), note no ‘=‘
    db2.vm.define var_vm2_name

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    db2.vm.network "forwarded_port", guest:   80, host: 20080
    db2.vm.network "forwarded_port", guest:  443, host: 20443
    db2.vm.network "forwarded_port", guest: 1521, host: 21521
    db2.vm.network "forwarded_port", guest: 5500, host: 25500

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    db2.vm.network "private_network", ip: var_vm2_public_ip

    # Share an additional folder to the guest VM
    db2.vm.synced_folder "/Volumes/Samsung_T5/dev", "/oradev"
    #db2.vm.synced_folder "/Volumes/Samsung_T5/dev", "/oradev", group: "dba", owner: "oracle"

    # Provider-specific configuration so you can fine-tune. These expose provider-specific options.
    db2.vm.provider "virtualbox" do |vb2|
      vb2.memory = var_mem_size
      vb2.cpus   = var_cpus
      # set the name of the VirtualBox VM
      vb2.name   = var_vm2_name
    
      vb2.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', '0', '--nonrotational', var_non_rotational]

      unless File.exist?(var_vm2_disk1)
        vb2.customize ['createhd', '--filename', var_vm2_disk1, '--size', var_disk_size * 1024]
      end
      vb2.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_vm2_disk1]

      unless File.exist?(var_vm2_disk2)
        vb2.customize ['createhd', '--filename', var_vm2_disk2, '--size', var_disk_size * 1024]
      end
      vb2.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--nonrotational', var_non_rotational, '--medium', var_vm2_disk2]
    end


    # Enable provisioning with shell scripts. Add'l options ( such as Puppet, Chef, Ansible, Salt, Docker, etc.)
    #config.vm.provision "shell", inline: <<-SHELL
    db2.vm.provision "shell", env: {"PUBLIC_IP" => var_vm2_public_ip, "VMNAME" => var_vm2_name, "PARTNER_IP" => var_vm1_public_ip, "PARTNER_VMNAME" => var_vm1_name}, inline: <<-SHELL
      echo "${PUBLIC_IP}    ${VMNAME}    ${VMNAME}.local" >> /etc/hosts
      echo "${PARTNER_IP}    ${PARTNER_VMNAME}    ${PARTNER_VMNAME}.local" >> /etc/hosts
      echo "${VMNAME}.local" > /etc/hostname
      sh /vagrant/scripts/setup.sh    
      echo "%dba  ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
    SHELL

  end

end
